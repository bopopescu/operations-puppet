#!/usr/bin/perl
use strict;
use IPC::Open3;
use IO::Select;
use Sys::Syslog;
use Storable qw(nstore retrieve);

# general conf
my $conf = {
	'SENDER' => 'root@wikimedia.org',
	'SUCCESS-RECIPIENT' => 'jgreen@wikimedia.org', # this recip gets only SUCCESS notices
	'FAILURE-RECIPIENT' => 'jgreen@wikimedia.org', # this recip gets only FAILURE notices
	'IDENT' => ($0 =~ /([^\/]+)$/) ? $1 : $0,
	'LOCKFILE' => '/tmp/offhost_backups.lock',
	'STATEFILE' => '/tmp/offhost_backups.state',
};
chomp($conf->{'HOSTNAME'} = `hostname --short`);
chomp($conf->{'DATE'} = `/bin/date "+%Y%m%d-%H%M%S"`);

# --ignore-existing to prevent a 'rogue' box from clobbering previously collected files (some risk of transferring half-written files)
my $archive_push = "-rltd --chmod=Fg-w,o-rwx --exclude='*.tmp' --exclude='.*' --exclude='udplogs/'";
my $archive_pull = "-ar --ignore-existing --exclude='*.tmp' --exclude='.*' --exclude='udplogs/'";

# jobs, if it matters, keep 'em numbered in the order you want them to happen
# try local boxes first, especially those with few other jobs, then cross-site boxes
my $mirror;
if ($conf->{'HOSTNAME'} eq 'indium') {

	# pull from archive peers and fundraising db dumpers
	$mirror->{'1'} = "rsync $archive_pull backupmover\@db1025.eqiad.wmnet:/a/archive/ /a/archive/";
	$mirror->{'2'} = "rsync $archive_pull backupmover\@loudon.wikimedia.org:/archive/ /a/archive/";
	$mirror->{'3'} = "rsync $archive_pull backupmover\@aluminium.wikimedia.org:/archive/ /a/archive/";
	$mirror->{'4'} = "rsync $archive_pull backupmover\@db78.pmtpa.wmnet:/a/archive/ /a/archive/";

	# push local logs to archive peers
	$mirror->{'5'} = "rsync $archive_push /a/archive/indium/logs/ backupmover\@aluminium.wikimedia.org:/archive/indium/logs/";
	$mirror->{'6'} = "rsync $archive_push /a/archive/indium/logs/ backupmover\@db78.pmtpa.wmnet:/a/archive/indium/logs/";

} elsif ($conf->{'HOSTNAME'} eq 'db78') {

	# pull from archive peers and db dumpers
	$mirror->{'1'} = "rsync $archive_pull backupmover\@db1025.eqiad.wmnet:/a/archive/ /a/archive/";
	$mirror->{'2'} = "rsync $archive_pull backupmover\@aluminium.wikimedia.org:/archive/ /a/archive/";
	$mirror->{'3'} = "rsync $archive_pull backupmover\@loudon.wikimedia.org:/archive/ /a/archive/";

} elsif ($conf->{'HOSTNAME'} eq 'aluminium') {

	# pull from archive peers and db dumpers
	$mirror->{'1'} = "rsync $archive_pull backupmover\@db78.pmtpa.wmnet:/a/archive/ /archive/";
	$mirror->{'2'} = "rsync $archive_pull backupmover\@db1025.eqiad.wmnet:/a/archive/ /archive/";
	$mirror->{'3'} = "rsync $archive_pull backupmover\@loudon.wikimedia.org:/archive/ /archive/";

	# collect local syslog stuff from paypal to local archive
	$mirror->{'4'} = "rsync -ar --exclude=*log /var/log/fundraising/ /archive/$conf->{'HOSTNAME'}/logs/";

	# hacky remote snapshot strategy for Zack's script-hacking dir (probably switch this to copy to grosley...)
	## remote: make a hard-link copy of the most recent rsync destination
	$mirror->{'5'} = "/usr/bin/ssh fundraising\@tridge.wikimedia.org \"cd /data/fundraising/$conf->{'HOSTNAME'}/br; cp -al \\`ls -t|grep '^[0-9]\\{8\\}-[0-9]\\{6\\}\$'|head -1\\` $conf->{'DATE'}\"";
	## rsync over the hard-link copy to clobber whatever has changed 
	$mirror->{'6'} = "/usr/bin/rsync -ar --delete /srv/br/ fundraising\@tridge.wikimedia.org:$conf->{'HOSTNAME'}/br/$conf->{'DATE'}/";
	## remote: adjust the modified timestamp on the remote rsync dir, so next run will see it as most recent
	$mirror->{'7'} = "/usr/bin/ssh fundraising\@tridge.wikimedia.org \"touch /data/fundraising/$conf->{'HOSTNAME'}/br/$conf->{'DATE'}\"";

} elsif ($conf->{'HOSTNAME'} eq 'grosley') {

	# collect local syslog stuff from paypal to archive
	$mirror->{'1'} = "rsync -ar --exclude=*log /var/log/fundraising/ /archive/$conf->{'HOSTNAME'}/logs/";

	# hacky remote snapshot strategy for Zack's script-hacking dir (probably switch this to copy to grosley...)
	## remote: make a hard-link copy of the most recent rsync destination
	$mirror->{'2'} = "/usr/bin/ssh fundraising\@tridge.wikimedia.org \"cd /data/fundraising/$conf->{'HOSTNAME'}/br; cp -al \\`ls -t|grep '^[0-9]\\{8\\}-[0-9]\\{6\\}\$'|head -1\\` $conf->{'DATE'}\"";
	## rsync over the hard-link copy to clobber whatever has changed 
	$mirror->{'3'} = "/usr/bin/rsync -ar --delete /srv/br/ fundraising\@tridge.wikimedia.org:$conf->{'HOSTNAME'}/br/$conf->{'DATE'}/";
	## remote: adjust the modified timestamp on the remote rsync dir, so next run will see it as most recent
	$mirror->{'4'} = "/usr/bin/ssh fundraising\@tridge.wikimedia.org \"touch /data/fundraising/$conf->{'HOSTNAME'}/br/$conf->{'DATE'}\"";

}

# lock to prevent collisions
if (my $lock_error = setlockfile('set')) {
	printlog("exit: $lock_error");
	exit;
}

# get run time date and date of last run for use in deciding whether to mail
my $today = (localtime(time))[3];
my $state = retrieve($conf->{'STATEFILE'}) if -e $conf->{'STATEFILE'};

# cycle through jobs
my $email;
for my $m (sort {$a<=>$b} keys %{$mirror}) {

	printlog($mirror->{$m});
	$email->{'report'} .= "$mirror->{$m}\n";

	# open system call using open3 so we can cleanly address stderr vs stdout
	my $child_pid = open3(*W, *R, *E, $mirror->{$m});

	close (W); # don't need the write handle at all, so we close that

	# use IO::Select to step through the output of open3
	my ($selector) = IO::Select->new();
	$selector->add (*R, *E);

	# keep looping through open3 filehandles until there is no more output on any of them
	while (1) {
		last if scalar ($selector->handles) == 0;
		my @ready = $selector->can_read (1);
		for my $fh (@ready) {
			my $ffh = fileno($fh);  # identify which handle we're dealing with
			if (eof ($fh)) {	# close the filehandle if we reach the end of output
				$selector->remove ($fh);
				next;
			}
			my $line = scalar <$fh>; # this is the output itself from the current filehandle
			chomp $line;
			if ($ffh == fileno(R)) { # output on stdout
				printlog($line);
				$email->{'report'} .= "$line\n";
			} elsif ($ffh == fileno (E)) { # output on stderr
				printlog($line,'warning');
				next if $line =~ /^tar: Removing leading/;
				$email->{'report'} .= "$line\n";
				$email->{'errors'}++;
			}
		}
	}

	close (R);
	close (E);

}

# mail on all errors, but only mail a success report on the first run of the day
if ($email->{'errors'}) {
	$email->{'subject'} = "FAILURE: $conf->{'HOSTNAME'} $conf->{'IDENT'} had errors";
	$email->{'recipient'} = $conf->{'FAILURE-RECIPIENT'};
} elsif ($state->{'last_run'} ne $today) {
	$email->{'subject'} = "SUCCESS: $conf->{'HOSTNAME'} $conf->{'IDENT'} ran without errors";
	$email->{'recipient'} = $conf->{'SUCCESS-RECIPIENT'};
}
if (defined $email->{'recipient'}) {
	open MAILER, "|/usr/sbin/sendmail -f $conf->{'SENDER'} $email->{'recipient'}";
	print MAILER "From: $conf->{'SENDER'}\n" .
		"To: $email->{'recipient'}\n" .
		"Subject: $email->{'subject'}\n\n" .
		"$email->{'report'}";
	close MAILER;
	printlog("report sent to $email->{'recipient'}");	
}

# record state for next run
$state->{'last_run'} = $today;
nstore $state, $conf->{'STATEFILE'} or die "couldn't write $conf->{'STATEFILE'}: $!\n";

setlockfile('unset');

printlog('done!');

exit;


#         _                 _   _             
# ____  _| |__ _ _ ___ _  _| |_(_)_ _  ___ ___
#(_-< || | '_ \ '_/ _ \ || |  _| | ' \/ -_|_-<
#/__/\_,_|_.__/_| \___/\_,_|\__|_|_||_\___/__/
#                                             

sub printlog {
	my $msg = $_[0] ? $_[0] : '';
	my $severity = $_[1] ? $_[1] : 'info'; # notice warning error etc.
	Sys::Syslog::setlogsock('unix');
	Sys::Syslog::openlog($conf->{'IDENT'},'ndelay,pid','user');
	Sys::Syslog::syslog($severity,$msg);
	Sys::Syslog::closelog();
}


# set lockfile
sub setlockfile {
    my $action = shift;
    if ($action eq 'set') {
        return("$0 already running") if (running($0));
        open LOCK, "> $conf->{'LOCKFILE'}";
        flock (LOCK, 2) or return("$0 already running?");
        print LOCK $$;
        close LOCK;
    } else {
        unlink $conf->{'LOCKFILE'};
    }
    return;
}


# check for lockfile
#  -> if found, check for process matching PID
#   -> if no matching process, whack the lockfile
sub running {
    my $prog = shift;
    $prog =~ s/^(.*\/)+//g;
    if (-e $conf->{'LOCKFILE'}) {
        open LOCK, $conf->{'LOCKFILE'};
        my $checkpid = <LOCK>;
        close LOCK;
        if ($checkpid) {
            chomp $checkpid;
            if (`ps -p $checkpid -o command= | grep $prog`) {
                return $checkpid;
            } else {
                printlog("removed stale lockfile for $prog ($checkpid)",'warning');
                unlink $conf->{'LOCKFILE'};
            }
        }
    }
    return;
}

