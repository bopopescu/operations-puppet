'''
Wrapper for salt commands to see which minions failed
'''

import salt.key
import salt.client
import re

# TODO: make this configurable
reg = {<% deployment_minion_regex.sort.each do |repo,regex| %>'<%= repo %>': '<%= regex %>',<% end %>}

def fetch(repo):
    '''
    Fetch from a master, for the specified repo
    '''
    client = salt.client.LocalClient(__opts__['conf_file'])
    cmd = 'deploy.fetch'
    if repo not in reg:
        return "Error: repo isn't defined"
    regex = reg[repo]
    arg = (repo,)
    minions = client.cmd(regex, cmd, expr_form='pcre', arg=arg, timeout=30, ret='deploy_redis')
    key = salt.key.Key(__opts__)
    keys = key.list_keys()
    return report(minions,keys,repo)

def checkout(repo, reset=False):
    '''
    Fetch from a master, for the specified repo
    '''
    client = salt.client.LocalClient(__opts__['conf_file'])
    cmd = 'deploy.checkout'
    if repo not in reg:
        return "Error: repo isn't defined"
    regex = reg[repo]
    arg = (repo,reset)
    minions = {}
    minions = client.cmd(regex, cmd, expr_form='pcre', arg=arg, timeout=30, ret='deploy_redis')
    key = salt.key.Key(__opts__)
    keys = key.list_keys()
    return report(minions,keys,repo)

def report(minions,keys,repo):
    success = []
    timedout = []
    fail = {}
    for minion,ret in sorted(minions.items()):
        if not isinstance(ret, dict):
            fail[minion] = ret
            continue
        if ret['status'] == 0:
            success.append(minion)
        else:
            fail[minion] = ret['status']
    ret = sorted(set(keys['minions']) - set(minions))
    for minion in ret:
        if re.search(reg[repo],minion):
            timedout.append(minion)
    # "succeeded: {0}, didn't run: {1}, failed: {2}"
    report = "succeeded: {0}, timed out: {1}, failed: {2}"
    if fail:
        report = report + " {3}"
    report = report.format(len(success), len(timedout), len(fail), fail)
    print report
    return report
